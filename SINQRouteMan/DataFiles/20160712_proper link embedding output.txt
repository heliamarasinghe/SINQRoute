connect failed. Error: Connection refused
Reading topology from controller
Reading link latency values
Generating substrate topology file

Printing jsonSentToCtrlr
{"method":"reroute","param":false}


 Done
Socket created
TIME SLOT: 0
Executing Initial Link Embedder
	 Reading of Network Substrate Topology from File: DataFiles/init/f1_subTopo.txt
	 Reading Link QoS classes from File: DataFiles/init/f2_linkQoS.txt
	 Reading Node QoS classes from File: DataFiles/init/f3_nodeQoS.txt
	 Reading of the topology of VN requests from File: DataFiles/t0/f4_vnReqTopo.txt
	 Reading of substrate bw unit cost from File: DataFiles/t0/f5_subUnitCost.txt
	 Reading of node embedding from File: DataFiles/t0/f8_ph1EmbeddedVnodes.txt
	 Reading the VN requests details File: DataFiles/t0/f9_ph1AcceptedVlinks.txt

	 Network definition
	 finding shortest_path func for: 42  virtual links

	 Number of shortest paths (COUNT_PATH):169
	 nb_candidate_embedding_nodes:210
	 shortestPathVect.size =210

	 A- Creation of VN embedding variables 'x' and 'z' 

	 B- no partially VN Embedding: accept all virtual links or block all

	 C- Substrate Link Bandwidth Capacity constraint

	 E- Calculation of the objective function Maximize the PIP Profit

	
Warning:  Output names have been modified to conform to LP format.
Found incumbent of value 0.000000 after 0.00 sec. (0.01 ticks)
Tried aggregator 2 times.
MIP Presolve eliminated 45 rows and 138 columns.
MIP Presolve modified 15 coefficients.
Aggregator did 42 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.18 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.19 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.19 ticks)
Solution Status=Optimal
Objective Value =4390

z        = [1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
1]
x        = [1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0, 1, 0,
0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
0, 0, 0, 1, 1, 0, 0, 0, 0, 1,
0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
1, 1, 0, 0, 1, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
0, 1, 0, 0, 0, 1, 0, 0, 0, 0,
1, 0, 0, 0, 1, 0, 0, 0, 0]

	Printing of embedding solution details

	vLink	sPath	sSrc	sDest	Used sNodes	Used sLinks
	7	0	10	3	[10 9 3 ]	[26 8 ]
	8	5	3	4	[3 4 ]	[7 ]
	9	6	10	4	[10 9 4 ]	[26 9 ]
	10	11	5	9	[5 9 ]	[10 ]
	11	12	9	11	[9 14 11 ]	[25 38 ]
	12	17	11	5	[11 10 5 ]	[41 11 ]
	13	22	17	5	[17 16 9 5 ]	[30 24 10 ]
	25	27	9	7	[9 8 7 ]	[22 20 ]
	26	32	5	9	[5 9 ]	[10 ]
	27	33	5	7	[5 3 4 7 ]	[3 7 13 ]
	36	38	13	4	[13 12 10 9 4 ]	[44 42 26 9 ]
	37	43	1	13	[1 4 9 10 12 13 ]	[6 9 26 42 44 ]
	38	48	4	16	[4 8 16 ]	[12 23 ]
	39	53	4	1	[4 1 ]	[6 ]
	40	54	1	16	[1 4 8 16 ]	[6 12 23 ]
	47	59	15	18	[15 17 18 ]	[31 32 ]
	48	64	18	19	[18 19 ]	[18 ]
	49	65	15	19	[15 17 19 ]	[31 33 ]
	50	70	2	20	[2 1 19 20 ]	[1 15 34 ]
	51	74	20	12	[20 15 12 ]	[36 40 ]
	52	79	12	2	[12 10 5 3 2 ]	[42 11 3 2 ]
	57	84	3	2	[3 2 ]	[2 ]
	58	85	2	8	[2 1 7 8 ]	[1 14 20 ]
	59	90	14	2	[14 9 3 2 ]	[25 8 2 ]
	60	95	3	8	[3 9 8 ]	[8 22 ]
	61	100	14	3	[14 9 3 ]	[25 8 ]
	62	105	15	19	[15 17 19 ]	[31 33 ]
	63	110	19	8	[19 7 8 ]	[16 20 ]
	64	115	7	15	[7 8 17 15 ]	[20 21 31 ]
	65	120	7	19	[7 19 ]	[16 ]
	70	121	6	2	[6 5 3 2 ]	[4 3 2 ]
	71	124	1	6	[1 3 5 6 ]	[5 3 4 ]
	72	129	2	1	[2 1 ]	[1 ]
	76	141	14	2	[14 9 3 2 ]	[25 8 2 ]
	77	146	12	2	[12 10 5 3 2 ]	[42 11 3 2 ]
	78	151	6	12	[6 5 10 12 ]	[4 11 42 ]
	79	155	12	14	[12 15 14 ]	[40 37 ]
	80	160	2	6	[2 3 5 6 ]	[2 3 4 ]
	81	164	6	14	[6 5 10 14 ]	[4 11 27 ]

	 DONE:   Printing of embedding solution details

	nb_vnode = 38
	 Preliminary_Node_Embedding_Vect.size = 38
		 zvals.size = 11
[1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
1]
	nb_vnode: 38
	nb_accepted_vnode: 35

	 Saving VN embedding solution in FILE: DataFiles/t0/f11_ph2EmbeddedVnodes.txt

	 Saving added and removed paths (vlinks) into FILE: DataFiles/t0/f14_ph2RemovedAddedPaths.txt

	 Performance Evaluation results of embedding solution
		 PIP profit:4390
		 PIP Cost:3321
		 nb accepted_vnode:35
		 nb accepted_requests:39 of 42
		 used bw:285
		 used cpu:127
		 bw efficiency:0.385135
		 PIP profit unit of available bw:5.93243
		 cpu efficiency:0.79375
		 PIP profit unit of available cpu:27.4375
		 nb average hops per VN link:2.35897
	 Updating of traffic demand with respect to blocked demand in FILE: DataFiles/t0/f12_ph2AcceptedVlinks.txt

	***************************************************

	********** DONE: Initial Link Embedding ***********

	***************************************************


	 SdnCtrlClient.addRemovePaths()
	Reading file:DataFiles/t0/f14_ph2RemovedAddedPaths.txt
	tSlot	currVnp	pathQos	nodesStr
	tSlot	currVnp	pathQos	nodesStr
	0	2	3	 10 9 3
	0	2	2	 3 4
	0	2	1	 10 9 4
	0	3	4	 5 9
	0	3	1	 9 14 11
	0	3	1	 11 10 5
	0	3	3	 17 16 9 5
	0	7	5	 9 8 7
	0	7	5	 5 9
	0	7	5	 5 3 4 7
	0	10	4	 13 12 10 9 4
	0	10	4	 1 4 9 10 12 13
	0	10	5	 4 8 16
	0	10	1	 4 1
	0	10	5	 1 4 8 16
	0	12	3	 15 17 18
	0	12	4	 18 19
	0	12	4	 15 17 19
	0	13	1	 2 1 19 20
	0	13	3	 20 15 12
	0	13	1	 12 10 5 3 2
	0	15	2	 3 2
	0	15	3	 2 1 7 8
	0	15	2	 14 9 3 2
	0	15	1	 3 9 8
	0	15	1	 14 9 3
	0	16	5	 15 17 19
	0	16	5	 19 7 8
	0	16	2	 7 8 17 15
	0	16	4	 7 19
	0	18	2	 6 5 3 2
	0	18	2	 1 3 5 6
	0	18	5	 2 1
	0	20	1	 14 9 3 2
	0	20	5	 12 10 5 3 2
	0	20	4	 6 5 10 12
	0	20	1	 12 15 14
	0	20	5	 2 3 5 6
	0	20	5	 6 5 10 14

	 Converting Removed VNPs into JSON

	 Converting Added VNPs into JSON

	 Printing JSON to remove and add paths
{
   "addCount" : 10,
   "addVnps" : [
      {
         "id" : "0-10",
         "paths" : [
            {
               "p" : [ 13, 12, 10, 9, 4 ],
               "q" : 4
            },
            {
               "p" : [ 1, 4, 9, 10, 12, 13 ],
               "q" : 4
            },
            {
               "p" : [ 4, 8, 16 ],
               "q" : 5
            },
            {
               "p" : [ 4, 1 ],
               "q" : 1
            },
            {
               "p" : [ 1, 4, 8, 16 ],
               "q" : 5
            }
         ]
      },
      {
         "id" : "0-12",
         "paths" : [
            {
               "p" : [ 15, 17, 18 ],
               "q" : 3
            },
            {
               "p" : [ 18, 19 ],
               "q" : 4
            },
            {
               "p" : [ 15, 17, 19 ],
               "q" : 4
            }
         ]
      },
      {
         "id" : "0-13",
         "paths" : [
            {
               "p" : [ 2, 1, 19, 20 ],
               "q" : 1
            },
            {
               "p" : [ 20, 15, 12 ],
               "q" : 3
            },
            {
               "p" : [ 12, 10, 5, 3, 2 ],
               "q" : 1
            }
         ]
      },
      {
         "id" : "0-15",
         "paths" : [
            {
               "p" : [ 3, 2 ],
               "q" : 2
            },
            {
               "p" : [ 2, 1, 7, 8 ],
               "q" : 3
            },
            {
               "p" : [ 14, 9, 3, 2 ],
               "q" : 2
            },
            {
               "p" : [ 3, 9, 8 ],
               "q" : 1
            },
            {
               "p" : [ 14, 9, 3 ],
               "q" : 1
            }
         ]
      },
      {
         "id" : "0-16",
         "paths" : [
            {
               "p" : [ 15, 17, 19 ],
               "q" : 5
            },
            {
               "p" : [ 19, 7, 8 ],
               "q" : 5
            },
            {
               "p" : [ 7, 8, 17, 15 ],
               "q" : 2
            },
            {
               "p" : [ 7, 19 ],
               "q" : 4
            }
         ]
      },
      {
         "id" : "0-18",
         "paths" : [
            {
               "p" : [ 6, 5, 3, 2 ],
               "q" : 2
            },
            {
               "p" : [ 1, 3, 5, 6 ],
               "q" : 2
            },
            {
               "p" : [ 2, 1 ],
               "q" : 5
            }
         ]
      },
      {
         "id" : "0-2",
         "paths" : [
            {
               "p" : [ 10, 9, 3 ],
               "q" : 3
            },
            {
               "p" : [ 3, 4 ],
               "q" : 2
            },
            {
               "p" : [ 10, 9, 4 ],
               "q" : 1
            }
         ]
      },
      {
         "id" : "0-20",
         "paths" : [
            {
               "p" : [ 14, 9, 3, 2 ],
               "q" : 1
            },
            {
               "p" : [ 12, 10, 5, 3, 2 ],
               "q" : 5
            },
            {
               "p" : [ 6, 5, 10, 12 ],
               "q" : 4
            },
            {
               "p" : [ 12, 15, 14 ],
               "q" : 1
            },
            {
               "p" : [ 2, 3, 5, 6 ],
               "q" : 5
            },
            {
               "p" : [ 6, 5, 10, 14 ],
               "q" : 5
            }
         ]
      },
      {
         "id" : "0-3",
         "paths" : [
            {
               "p" : [ 5, 9 ],
               "q" : 4
            },
            {
               "p" : [ 9, 14, 11 ],
               "q" : 1
            },
            {
               "p" : [ 11, 10, 5 ],
               "q" : 1
            },
            {
               "p" : [ 17, 16, 9, 5 ],
               "q" : 3
            }
         ]
      },
      {
         "id" : "0-7",
         "paths" : [
            {
               "p" : [ 9, 8, 7 ],
               "q" : 5
            },
            {
               "p" : [ 5, 9 ],
               "q" : 5
            },
            {
               "p" : [ 5, 3, 4, 7 ],
               "q" : 5
            }
         ]
      }
   ],
   "method" : "remAddPaths",
   "remCount" : 0,
   "remVnps" : null
}


Printing jsonSentToCtrlr
{"addCount":10,"addVnps":[{"id":"0-10","paths":[{"p":[13,12,10,9,4],"q":4},{"p":[1,4,9,10,12,13],"q":4},{"p":[4,8,16],"q":5},{"p":[4,1],"q":1},{"p":[1,4,8,16],"q":5}]},{"id":"0-12","paths":[{"p":[15,17,18],"q":3},{"p":[18,19],"q":4},{"p":[15,17,19],"q":4}]},{"id":"0-13","paths":[{"p":[2,1,19,20],"q":1},{"p":[20,15,12],"q":3},{"p":[12,10,5,3,2],"q":1}]},{"id":"0-15","paths":[{"p":[3,2],"q":2},{"p":[2,1,7,8],"q":3},{"p":[14,9,3,2],"q":2},{"p":[3,9,8],"q":1},{"p":[14,9,3],"q":1}]},{"id":"0-16","paths":[{"p":[15,17,19],"q":5},{"p":[19,7,8],"q":5},{"p":[7,8,17,15],"q":2},{"p":[7,19],"q":4}]},{"id":"0-18","paths":[{"p":[6,5,3,2],"q":2},{"p":[1,3,5,6],"q":2},{"p":[2,1],"q":5}]},{"id":"0-2","paths":[{"p":[10,9,3],"q":3},{"p":[3,4],"q":2},{"p":[10,9,4],"q":1}]},{"id":"0-20","paths":[{"p":[14,9,3,2],"q":1},{"p":[12,10,5,3,2],"q":5},{"p":[6,5,10,12],"q":4},{"p":[12,15,14],"q":1},{"p":[2,3,5,6],"q":5},{"p":[6,5,10,14],"q":5}]},{"id":"0-3","paths":[{"p":[5,9],"q":4},{"p":[9,14,11],"q":1},{"p":[11,10,5],"q":1},{"p":[17,16,9,5],"q":3}]},{"id":"0-7","paths":[{"p":[9,8,7],"q":5},{"p":[5,9],"q":5},{"p":[5,3,4,7],"q":5}]}],"method":"remAddPaths","remCount":0,"remVnps":null}


 Done
Socket created

	End of Main
connect failed. Error: Connection refused

